function init(){
    const
        fiskLayerMinX = parseFloat(document.body.dataset.fiskMinX),
        fiskLayerMinY = parseFloat(document.body.dataset.fiskMinY),
        fiskLayerMaxX = parseFloat(document.body.dataset.fiskMaxX),
        fiskLayerMaxY = parseFloat(document.body.dataset.fiskMaxY),
        fiskLayerExtent = [fiskLayerMinX, fiskLayerMinY, fiskLayerMaxX, fiskLayerMaxY],
        fiskLayerCenter = [(fiskLayerExtent[0] + fiskLayerExtent[2])/2, (fiskLayerExtent[1] + fiskLayerExtent[3])/2],
        fiskLayerMinZoom = 6,
        fiskLayerMaxZoom = 12;

    const osmLayer = new ol.layer.Tile({
        source: new ol.source.OSM()
    });

    const fiskMapLayer = new ol.layer.Tile({
        extent: ol.proj.transformExtent(fiskLayerExtent, 'EPSG:4326', 'EPSG:3857'),
        source: new ol.source.XYZ({
            attributions: 'Fisk map tiles generated by GDAL2Tiles',
            url: './{z}/{x}/{-y}.png',
            minZoom: fiskLayerMinZoom,
            maxZoom: fiskLayerMaxZoom
        })
    });

    const view = new ol.View({
        center: ol.proj.fromLonLat(fiskLayerCenter),
        zoom: 9,
        projection: "EPSG:3857",
        displayProjection: new ol.proj.Projection("EPSG:4326")
    });

    const map = new ol.Map({
        view: view,
        layers: [
            osmLayer,
            fiskMapLayer
        ],
        target: 'map',
        numZoomLevels: 20
    });
}


function layeredMap() {
    const osmLayer = new ol.layer.Tile({
        source: new ol.source.OSM()
    });
    osmLayer.set('name', 'OpenStreetMap');

    const fiskLayers = [];
    let minX = 180, minY=90, maxX=-180, maxY=-90;
    let maxZoom = 0, minZoom = Number.MAX_SAFE_INTEGER;
    let layerGroupName;
    for (layerGroupName in layers) {
        for (let layer of layers[layerGroupName]) {
            const layerBounds = [layer.bounds.minX, layer.bounds.minY, layer.bounds.maxX, layer.bounds.maxY],
                layerExtent = ol.proj.transformExtent(layerBounds, 'EPSG:4326', 'EPSG:3857');
            const tileLayer = new ol.layer.Tile({
                extent: layerExtent,
                source: new ol.source.XYZ({
                    attributions: 'Fisk map tiles generated by GDAL2Tiles',
                    url: `./${layer.name}/{z}/{x}/{-y}.png`,
                    minZoom: layer.minZoom,
                    maxZoom: layer.maxZoom
                })
            });
            tileLayer.set('name', layer.name);
            fiskLayers.push(tileLayer);
            minX = Math.min(layer.bounds.minX, minX);
            minY = Math.min(layer.bounds.minY, minY);
            maxX = Math.max(layer.bounds.maxX, maxX);
            maxY = Math.max(layer.bounds.maxY, maxY);

            minZoom = Math.min(layer.minZoom, minZoom);
            maxZoom = Math.max(layer.maxZoom, maxZoom);
        }
    }
    const fiskLayerGroupBounds = [minX, minY, maxX, maxY],
        fiskLayerGroupCenter = [(fiskLayerGroupBounds[0] + fiskLayerGroupBounds[2])/2, (fiskLayerGroupBounds[1] + fiskLayerGroupBounds[3])/2],
        fiskLayerGroupExtent = ol.proj.transformExtent(fiskLayerGroupBounds, 'EPSG:4326', 'EPSG:3857');

    const fiskLayerGroup = new ol.layer.Group({
        layers: fiskLayers,
        extent: fiskLayerGroupExtent,
        opacity: 0.8,
        visible: true
    });
    fiskLayerGroup.set('name', layerGroupName);

    OpenLayersLayerControlDelegate = {
        getRootLayerGroup: (map) => {
            return map.getLayerGroup();
        },
        getLayerName: (layer) => {
            return layer.get('name');
        },
        setLayerName: (layer, name) => {
            layer.set('name', name);
        },
        getSublayers: (layerGroup) => {
            return layerGroup.getLayers();
        },
        isLayerGroup: (layer) => {
            return layer instanceof ol.layer.Group;
        },
        configureControl: (control) => {
            LayerControl.prototype.setMap = function(map) {
                ol.control.Control.prototype.setMap.call(control, map);
                control.buildLayersUI(control.delegate.getRootLayerGroup(map));
            }
        }
    };

    function LayerControl(delegate) {
        this.delegate = delegate;
        this.delegate.configureControl(this);
    }
    LayerControl.prototype = new ol.control.Control({
        element: (() => {
            const container = document.createElement('div');
            container.classList.add('layers', 'custom-control', 'openlayers');
            container.textContent = 'Layers: ';
            return container;
        })(),
    });

    LayerControl.prototype.buildLayersUI = function(rootLayerGroup) {
        this.delegate.setLayerName(rootLayerGroup, 'Map Layers:');
        const layersUI = document.createElement('ol');
        layersUI.appendChild(this.buildLayerGroupUI(rootLayerGroup));
        this.element.appendChild(layersUI);
    };

    LayerControl.prototype.buildLayerGroupUI = function(layerGroup) {
        const layerGroupListItem = document.createElement('li');
        layerGroupListItem.appendChild(document.createTextNode(this.delegate.getLayerName(layerGroup) || '***'));
        const children = this.delegate.getSublayers(layerGroup);
        if (children.getLength()) {
            const layerGroupChildren = layerGroupListItem.appendChild(document.createElement('ol'));
            children.forEach((child) => {
                if (this.delegate.isLayerGroup(child)) {
                    layerGroupChildren.appendChild(this.buildLayerGroupUI(child));
                } else {
                    layerGroupChildren.appendChild(this.buildLayerUI(child));
                }
            });
        }
        return layerGroupListItem;
    };

    LayerControl.prototype.buildLayerUI = function(layer) {
        const layerListItem = document.createElement('li');
        layerListItem.appendChild(document.createTextNode(this.delegate.getLayerName(layer) || 'Layer'));
        return layerListItem;
    };


    const view = new ol.View({
        center: ol.proj.fromLonLat(fiskLayerGroupCenter),
        zoom: minZoom,
        projection: "EPSG:3857",
        displayProjection: new ol.proj.Projection("EPSG:4326")
    });

    const map = new ol.Map({
        view: view,
        layers: [
            osmLayer,
            fiskLayerGroup
        ],
        controls: [
            new LayerControl(OpenLayersLayerControlDelegate)
        ],
        target: 'map',
        numZoomLevels: 20
    });


}